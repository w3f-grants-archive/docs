import{_ as a,c as s,o as n,d as e}from"./app.033c03ff.js";const A=JSON.parse('{"title":"xcmPallet, every possible call variation explained","description":"","frontmatter":{},"headers":[{"level":3,"title":"There are three scenarios we use in our SDK. These are:","slug":"there-are-three-scenarios-we-use-in-our-sdk-these-are","link":"#there-are-three-scenarios-we-use-in-our-sdk-these-are","children":[]},{"level":3,"title":"There are also two possible ways that our SDK allows you to contruct your XCM calls:","slug":"there-are-also-two-possible-ways-that-our-sdk-allows-you-to-contruct-your-xcm-calls","link":"#there-are-also-two-possible-ways-that-our-sdk-allows-you-to-contruct-your-xcm-calls","children":[]},{"level":2,"title":"Builder pattern XCM call from Relay chain to Parachain","slug":"builder-pattern-xcm-call-from-relay-chain-to-parachain","link":"#builder-pattern-xcm-call-from-relay-chain-to-parachain","children":[]},{"level":2,"title":"Builder pattern XCM call from Parachain chain to Relay chain","slug":"builder-pattern-xcm-call-from-parachain-chain-to-relay-chain","link":"#builder-pattern-xcm-call-from-parachain-chain-to-relay-chain","children":[]},{"level":2,"title":"Builder pattern XCM call from Parachain to Parachain","slug":"builder-pattern-xcm-call-from-parachain-to-parachain","link":"#builder-pattern-xcm-call-from-parachain-to-parachain","children":[]},{"level":2,"title":"Function pattern XCM call from Relay chain to Parachain","slug":"function-pattern-xcm-call-from-relay-chain-to-parachain","link":"#function-pattern-xcm-call-from-relay-chain-to-parachain","children":[]},{"level":2,"title":"Function pattern XCM call from Parachain to Relay chain","slug":"function-pattern-xcm-call-from-parachain-to-relay-chain","link":"#function-pattern-xcm-call-from-parachain-to-relay-chain","children":[]},{"level":2,"title":"Function pattern XCM call from Parachain to Parachain","slug":"function-pattern-xcm-call-from-parachain-to-parachain","link":"#function-pattern-xcm-call-from-parachain-to-parachain","children":[]},{"level":2,"title":"Developer experience","slug":"developer-experience","link":"#developer-experience","children":[{"level":3,"title":"Builder pattern experience","slug":"builder-pattern-experience","link":"#builder-pattern-experience","children":[]},{"level":3,"title":"Control messages into console","slug":"control-messages-into-console","link":"#control-messages-into-console","children":[]}]}],"relativePath":"sdk/xcmPallet.md"}'),l={name:"sdk/xcmPallet.md"},o=e(`<h1 id="xcmpallet-every-possible-call-variation-explained" tabindex="-1">xcmPallet, every possible call variation explained <a class="header-anchor" href="#xcmpallet-every-possible-call-variation-explained" aria-hidden="true">#</a></h1><h3 id="there-are-three-scenarios-we-use-in-our-sdk-these-are" tabindex="-1">There are three scenarios we use in our SDK. These are: <a class="header-anchor" href="#there-are-three-scenarios-we-use-in-our-sdk-these-are" aria-hidden="true">#</a></h3><ul><li>Relay chain to Parachain XCM transfer</li><li>Parachain to Relay chain XCM transfer</li><li>Parachain to Parachain XCM transfer</li></ul><h3 id="there-are-also-two-possible-ways-that-our-sdk-allows-you-to-contruct-your-xcm-calls" tabindex="-1">There are also two possible ways that our SDK allows you to contruct your XCM calls: <a class="header-anchor" href="#there-are-also-two-possible-ways-that-our-sdk-allows-you-to-contruct-your-xcm-calls" aria-hidden="true">#</a></h3><ul><li>Construct your calls via Builder pattern (reconmended, easy to use)</li><li>Construct them classic function like call way</li></ul><p>Both of these ways will be explained.</p><h2 id="builder-pattern-xcm-call-from-relay-chain-to-parachain" tabindex="-1">Builder pattern XCM call from Relay chain to Parachain <a class="header-anchor" href="#builder-pattern-xcm-call-from-relay-chain-to-parachain" aria-hidden="true">#</a></h2><p>Only <code>from</code> parameter is provided, thus the relaychain to parachain scenario will be used.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Basilisk</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)       </span><span style="color:#676E95;font-style:italic;">// Destination node</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)       </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address)     </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()              </span><span style="color:#676E95;font-style:italic;">// Function called to build call</span></span>
<span class="line"></span></code></pre></div><p>AccountId32 and AccountKey20 address can be directly copied from PolkadotJS as our SDK has handler to convert it into desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><h2 id="builder-pattern-xcm-call-from-parachain-chain-to-relay-chain" tabindex="-1">Builder pattern XCM call from Parachain chain to Relay chain <a class="header-anchor" href="#builder-pattern-xcm-call-from-parachain-chain-to-relay-chain" aria-hidden="true">#</a></h2><p>Only <code>to</code> parameter is provided, thus the parachain to relaychain scenario will be used.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Acala</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)            </span><span style="color:#676E95;font-style:italic;">// Origin node</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currency</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)          </span><span style="color:#676E95;font-style:italic;">// Token symbol if needed (if not just insert random string, it will not be considered)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currencyId</span><span style="color:#A6ACCD;">(currencyId)   </span><span style="color:#676E95;font-style:italic;">// CurrencyID if needed (if not just insert random number, it will not be considered)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)           </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address)         </span><span style="color:#676E95;font-style:italic;">// AccountId32 address</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()                  </span><span style="color:#676E95;font-style:italic;">// Function called to build call</span></span>
<span class="line"></span></code></pre></div><p>AccountId32 and AccountKey20 address can be directly copied from PolkadotJS as our SDK has handler to convert it into desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><h2 id="builder-pattern-xcm-call-from-parachain-to-parachain" tabindex="-1">Builder pattern XCM call from Parachain to Parachain <a class="header-anchor" href="#builder-pattern-xcm-call-from-parachain-to-parachain" aria-hidden="true">#</a></h2><p>Both <code>from</code> and <code>to</code> parameters are provided, thus the parachain to parachain scenario will be used.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Karura</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)           </span><span style="color:#676E95;font-style:italic;">// Origin node</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Basilisk</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)           </span><span style="color:#676E95;font-style:italic;">// Destination node</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currency</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">KSM</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)          </span><span style="color:#676E95;font-style:italic;">// Token symbol if needed (if not just insert random string, it will not be considered)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currencyId</span><span style="color:#A6ACCD;">(currencyId)   </span><span style="color:#676E95;font-style:italic;">// CurrencyID if needed (if not just insert random number, it will not be considered)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">amount</span><span style="color:#A6ACCD;">(amount)           </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">address</span><span style="color:#A6ACCD;">(address)         </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()                  </span><span style="color:#676E95;font-style:italic;">// Function called to build call</span></span>
<span class="line"></span></code></pre></div><p>AccountId32 and AccountKey20 address can be directly copied from PolkadotJS as our SDK has handler to convert it into desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><h2 id="function-pattern-xcm-call-from-relay-chain-to-parachain" tabindex="-1">Function pattern XCM call from Relay chain to Parachain <a class="header-anchor" href="#function-pattern-xcm-call-from-relay-chain-to-parachain" aria-hidden="true">#</a></h2><p>This XCM constructor uses native Relay chain XCM pallet. It is very straight forward to implement.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xcmPallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transferRelayToPara</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  api</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  destination</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Destination node</span></span>
<span class="line"><span style="color:#A6ACCD;">  amount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">  to            </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address</span></span>
<span class="line"><span style="color:#A6ACCD;">  )</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>AccountId32 and AccountKey20 address can be directly copied from PolkadotJS as our SDK has handler to convert it into desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><h2 id="function-pattern-xcm-call-from-parachain-to-relay-chain" tabindex="-1">Function pattern XCM call from Parachain to Relay chain <a class="header-anchor" href="#function-pattern-xcm-call-from-parachain-to-relay-chain" aria-hidden="true">#</a></h2><p>This XCM constructor uses send function same as Parachain to Parachain scenario. The difference is, that this scenario does <code>not specify destination node</code>. This way function knows, that transfer is to Relay chain.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xcmPallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  api</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// Origin node</span></span>
<span class="line"><span style="color:#A6ACCD;">  currency</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// Token symbol if needed (if not just insert random string, it will not be considered)</span></span>
<span class="line"><span style="color:#A6ACCD;">  currencyID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// CurrencyID if needed (if not just insert random number, it will not be considered)</span></span>
<span class="line"><span style="color:#A6ACCD;">  amount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">  to            </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address</span></span>
<span class="line"><span style="color:#A6ACCD;">  )</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>AccountId32 and AccountKey20 address can be directly copied from PolkadotJS as our SDK has handler to convert it into desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><h2 id="function-pattern-xcm-call-from-parachain-to-parachain" tabindex="-1">Function pattern XCM call from Parachain to Parachain <a class="header-anchor" href="#function-pattern-xcm-call-from-parachain-to-parachain" aria-hidden="true">#</a></h2><p>This XCM constructor uses send function same as Parachain to Relay chain scenario. The difference is, that this scenario <code>does specify destination node</code>. This way function knows, that transfer is to another Parachain.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xcmPallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  api</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// Origin node</span></span>
<span class="line"><span style="color:#A6ACCD;">  currency</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// Token symbol if needed (if not just insert random string, it will not be considered)</span></span>
<span class="line"><span style="color:#A6ACCD;">  currencyID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// CurrencyID if needed (if not just insert random number, it will not be considered)</span></span>
<span class="line"><span style="color:#A6ACCD;">  amount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// Token amount</span></span>
<span class="line"><span style="color:#A6ACCD;">  to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;font-style:italic;">// AccountId32 or AccountKey20 address</span></span>
<span class="line"><span style="color:#A6ACCD;">  destination   </span><span style="color:#676E95;font-style:italic;">// Destination node</span></span>
<span class="line"><span style="color:#A6ACCD;">  )</span></span>
<span class="line"></span></code></pre></div><p>AccountId32 and AccountKey20 address can be directly copied from PolkadotJS as our SDK has handler to convert it into desired hex string automatically.</p><p>Eg. use standard public key <code>141NGS2jjZca5Ss2Nysth2stJ6rimcnufCNHnh5ExSsftn7U</code> Instead of <code>0x84fc49ce30071ea611731838cc7736113c1ec68fbc47119be8a0805066df9b2b</code></p><h2 id="developer-experience" tabindex="-1">Developer experience <a class="header-anchor" href="#developer-experience" aria-hidden="true">#</a></h2><h3 id="builder-pattern-experience" tabindex="-1">Builder pattern experience <a class="header-anchor" href="#builder-pattern-experience" aria-hidden="true">#</a></h3><p>When developing with Builder pattern, the developer is guided by the typescript and thus knows which parameter can be added as next. This increases the developer experience and makes SDK easier to use. <img width="498" alt="Screenshot 2023-01-08 at 14 27 53" src="https://user-images.githubusercontent.com/79721475/211198665-ffb3eeb0-402d-4fad-9705-9a863fb894c6.png"></p><h3 id="control-messages-into-console" tabindex="-1">Control messages into console <a class="header-anchor" href="#control-messages-into-console" aria-hidden="true">#</a></h3><p>Once call is being constructed developer is warned about major details in regards to call into console. This way they can assure, that call they wanted to create is being created. <img width="409" alt="212045110-c001fcb7-8cc2-421c-9cd0-6d8205b3b11f" src="https://user-images.githubusercontent.com/55763425/212065770-48ff4b35-2463-48b3-bd51-bae56b2105a8.png"></p>`,41),t=[o];function c(r,p,i,d,y,h){return n(),s("div",null,t)}const C=a(l,[["render",c]]);export{A as __pageData,C as default};
