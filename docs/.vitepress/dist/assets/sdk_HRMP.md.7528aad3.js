import{_ as e,c as s,o as n,d as a}from"./app.033c03ff.js";const A=JSON.parse('{"title":"HRMP pallet, every possible call variation explained","description":"","frontmatter":{},"headers":[{"level":3,"title":"There are two scenarios we use in our SDK. These are:","slug":"there-are-two-scenarios-we-use-in-our-sdk-these-are","link":"#there-are-two-scenarios-we-use-in-our-sdk-these-are","children":[]},{"level":3,"title":"There are also two possible ways that our SDK allows you to contruct your HRMP calls:","slug":"there-are-also-two-possible-ways-that-our-sdk-allows-you-to-contruct-your-hrmp-calls","link":"#there-are-also-two-possible-ways-that-our-sdk-allows-you-to-contruct-your-hrmp-calls","children":[]},{"level":2,"title":"Builder pattern HRMP call to open channels","slug":"builder-pattern-hrmp-call-to-open-channels","link":"#builder-pattern-hrmp-call-to-open-channels","children":[]},{"level":2,"title":"Builder pattern HRMP call to close channels","slug":"builder-pattern-hrmp-call-to-close-channels","link":"#builder-pattern-hrmp-call-to-close-channels","children":[]},{"level":2,"title":"Function pattern HRMP call to open channel","slug":"function-pattern-hrmp-call-to-open-channel","link":"#function-pattern-hrmp-call-to-open-channel","children":[]},{"level":2,"title":"Function pattern HRMP call to close channel","slug":"function-pattern-hrmp-call-to-close-channel","link":"#function-pattern-hrmp-call-to-close-channel","children":[]},{"level":2,"title":"Developer experience","slug":"developer-experience","link":"#developer-experience","children":[{"level":3,"title":"Builder pattern experience","slug":"builder-pattern-experience","link":"#builder-pattern-experience","children":[]}]}],"relativePath":"sdk/HRMP.md"}'),l={name:"sdk/HRMP.md"},o=a(`<h1 id="hrmp-pallet-every-possible-call-variation-explained" tabindex="-1">HRMP pallet, every possible call variation explained <a class="header-anchor" href="#hrmp-pallet-every-possible-call-variation-explained" aria-hidden="true">#</a></h1><h3 id="there-are-two-scenarios-we-use-in-our-sdk-these-are" tabindex="-1">There are two scenarios we use in our SDK. These are: <a class="header-anchor" href="#there-are-two-scenarios-we-use-in-our-sdk-these-are" aria-hidden="true">#</a></h3><ul><li>Opening HRMP channels between nodes</li><li>Closing HRMP channels between nodes</li></ul><h3 id="there-are-also-two-possible-ways-that-our-sdk-allows-you-to-contruct-your-hrmp-calls" tabindex="-1">There are also two possible ways that our SDK allows you to contruct your HRMP calls: <a class="header-anchor" href="#there-are-also-two-possible-ways-that-our-sdk-allows-you-to-contruct-your-hrmp-calls" aria-hidden="true">#</a></h3><ul><li>Construct your calls via Builder pattern (reconmended, easy to use)</li><li>Construct them classic function like call way</li></ul><p>Both of these ways will be explained.</p><p><em>(This pallet only works on Locally launched network. These functions require sudo access)</em></p><h2 id="builder-pattern-hrmp-call-to-open-channels" tabindex="-1">Builder pattern HRMP call to open channels <a class="header-anchor" href="#builder-pattern-hrmp-call-to-open-channels" aria-hidden="true">#</a></h2><p>When opening a new channel the operation has to be specified by providing <code>origin</code> &amp; <code>destination</code> nodes, calling <code>openChannel()</code> method and then providing <code>maxSize</code> and <code>maxMessageSize</code> parameters.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Karura</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)               </span><span style="color:#676E95;font-style:italic;">// Origin node</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Pichiu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)                 </span><span style="color:#676E95;font-style:italic;">// Destination node</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">openChannel</span><span style="color:#A6ACCD;">()                </span><span style="color:#676E95;font-style:italic;">// Call to open channel</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">maxSize</span><span style="color:#A6ACCD;">(maxSize)             </span><span style="color:#676E95;font-style:italic;">// Max size</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">maxMessageSize</span><span style="color:#A6ACCD;">(maxMsgSize)   </span><span style="color:#676E95;font-style:italic;">// Max message size</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="builder-pattern-hrmp-call-to-close-channels" tabindex="-1">Builder pattern HRMP call to close channels <a class="header-anchor" href="#builder-pattern-hrmp-call-to-close-channels" aria-hidden="true">#</a></h2><p>When closing channels the operation has to be specified by providing <code>origin</code> node, calling <code>closeChannel()</code> method and then providing <code>inbound</code> and <code>outbound</code> parameters.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Builder</span><span style="color:#A6ACCD;">(api)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Karura</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)          </span><span style="color:#676E95;font-style:italic;">//Origin node</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">closeChannel</span><span style="color:#A6ACCD;">()          </span><span style="color:#676E95;font-style:italic;">//Call to close channels</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inbound</span><span style="color:#A6ACCD;">(inbound)        </span><span style="color:#676E95;font-style:italic;">//Inbound</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">outbound</span><span style="color:#A6ACCD;">(outbound)      </span><span style="color:#676E95;font-style:italic;">//Outbound</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="function-pattern-hrmp-call-to-open-channel" tabindex="-1">Function pattern HRMP call to open channel <a class="header-anchor" href="#function-pattern-hrmp-call-to-open-channel" aria-hidden="true">#</a></h2><p>Same as Builder pattern, this pattern requires same details to construct. When opening a new channel the operation has to be specified by providing <code>origin</code> &amp; <code>destination</code> nodes, calling <code>openChannel()</code> method and then providing <code>maxSize</code> and <code>maxMessageSize</code> parameters.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">openChannels</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">openChannel</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    api</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;font-style:italic;">// Origin node</span></span>
<span class="line"><span style="color:#A6ACCD;">    destination</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// Destination node</span></span>
<span class="line"><span style="color:#A6ACCD;">    maxSize</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// Max size</span></span>
<span class="line"><span style="color:#A6ACCD;">    maxMessageSize      </span><span style="color:#676E95;font-style:italic;">// Max message size</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="function-pattern-hrmp-call-to-close-channel" tabindex="-1">Function pattern HRMP call to close channel <a class="header-anchor" href="#function-pattern-hrmp-call-to-close-channel" aria-hidden="true">#</a></h2><p>Same as Builder pattern, this pattern requires same details to construct. When closing channels the operation has to be specified by providing <code>origin</code> node, calling <code>closeChannel()</code> method and then providing <code>inbound</code> and <code>outbound</code> parameters.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">paraspell</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">closeChannels</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">closeChannel</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    api</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">              </span></span>
<span class="line"><span style="color:#A6ACCD;">    origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// Origin node </span></span>
<span class="line"><span style="color:#A6ACCD;">    inbound</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;font-style:italic;">// Inbound</span></span>
<span class="line"><span style="color:#A6ACCD;">    outbound           </span><span style="color:#676E95;font-style:italic;">// Outbound</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="developer-experience" tabindex="-1">Developer experience <a class="header-anchor" href="#developer-experience" aria-hidden="true">#</a></h2><h3 id="builder-pattern-experience" tabindex="-1">Builder pattern experience <a class="header-anchor" href="#builder-pattern-experience" aria-hidden="true">#</a></h3><p>When developing with Builder pattern, the developer is guided by the typescript and thus knows which parameter can be added as next. This increases the developer experience and makes SDK easier to use. <img width="498" alt="Screenshot 2023-01-08 at 14 27 53" src="https://user-images.githubusercontent.com/79721475/211198665-ffb3eeb0-402d-4fad-9705-9a863fb894c6.png"></p>`,22),t=[o];function p(c,r,i,d,h,y){return n(),s("div",null,t)}const C=e(l,[["render",p]]);export{A as __pageData,C as default};
